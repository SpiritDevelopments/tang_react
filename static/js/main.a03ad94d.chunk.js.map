{"version":3,"sources":["example/Home.js","example/Advanced.js","example/Login.js","example/Default.js","App.js","serviceWorker.js","index.js"],"names":["Home","allowZeroExpanded","className","to","db","no","ex","ans","url","alreadyRemoved","charactersState","Advanced","useState","characters","setCharacters","setLastDirection","childRefs","useMemo","Array","length","fill","map","i","React","createRef","swipe","dir","cardsLeft","filter","person","includes","toBeRemoved","index","indexOf","push","current","href","rel","character","ref","onSwipe","direction","nameToDelete","name","console","log","onCardLeftScreen","style","backgroundImage","date","Date","now","onClick","Login","Default","exact","path","component","Card","render","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a03ad94d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n  } from \"react-accessible-accordion\";\r\n//   import \"react-accessible-accordion/dist/fancy-example.css\";\r\n\r\n\r\nconst Home = () => {\r\n    return(\r\n        <Accordion allowZeroExpanded  className=\"accord\">\r\n        <AccordionItem>\r\n          <AccordionItemHeading>\r\n            <AccordionItemButton>基本情報（FE）</AccordionItemButton>\r\n          </AccordionItemHeading>\r\n          <AccordionItemPanel><Link to=\"/card\">１．セキュリティ</Link></AccordionItemPanel>\r\n          <AccordionItemPanel>２．データベース</AccordionItemPanel>\r\n          <AccordionItemPanel>３．ネットワーク</AccordionItemPanel>\r\n          <AccordionItemPanel>４．ハードウェア</AccordionItemPanel>\r\n        </AccordionItem>\r\n        <AccordionItem>\r\n          <AccordionItemHeading>\r\n            <AccordionItemButton>応用情報（AP）</AccordionItemButton>\r\n          </AccordionItemHeading>\r\n          <AccordionItemPanel>１．セキュリティ</AccordionItemPanel>\r\n          <AccordionItemPanel>２．データベース</AccordionItemPanel>\r\n          <AccordionItemPanel>３．ネットワーク</AccordionItemPanel>\r\n          <AccordionItemPanel>４．ハードウェア</AccordionItemPanel>\r\n        </AccordionItem>\r\n        <AccordionItem>\r\n          <AccordionItemHeading>\r\n            <AccordionItemButton>スペシャル</AccordionItemButton>\r\n          </AccordionItemHeading>\r\n          <AccordionItemPanel>OKASEN.</AccordionItemPanel>\r\n          <AccordionItemPanel>Kosukegawa</AccordionItemPanel>\r\n        </AccordionItem>\r\n      </Accordion>\r\n    )\r\n}\r\n\r\nexport default Home","import React, { useState, useMemo } from 'react'\r\n// import TinderCard from '../react-tinder-card/index'\r\nimport TinderCard from 'react-tinder-card'\r\nimport Countdown from 'react-countdown'\r\n\r\nconst db = [\r\n  {\r\n    no: 'Q05',\r\n    ex: '攻撃者が攻撃対象者のコンピュータに侵入した後に用いるツールを集めたパッケージ',\r\n    ans: 'rootkit',\r\n    url: './img/paper.png'\r\n  },\r\n  {\r\n    no: 'Q04',\r\n    ex: '攻撃対象のユーザがよく利用するWebサイトを不正に改ざんすることで、ウイルスに感染させようとする攻撃',\r\n    ans: '水飲み場型攻撃',\r\n    url: './img/paper.png'\r\n  },\r\n  {\r\n    no: 'Q03',\r\n    ex: '特定の企業などの組織を狙った攻撃。関係者を装ってウイルスメールを送付するなどして相手のPCをウイルスに感染させる。',\r\n    ans: '標的型攻撃',\r\n    url: './img/paper.png'\r\n  },\r\n  {\r\n    no: 'Q02',\r\n    ex: '適当な文字列を組み合わせて力任せにログインの試行を繰り返す攻撃',\r\n    ans: 'ブルートフォース攻撃',\r\n    url: './img/paper.png'\r\n  },\r\n  {\r\n    no: 'Q01',\r\n    ex: '不正なSQLを投入することで、通常はアクセスできないデータにアクセスしたり更新したりする攻撃',\r\n    ans: 'SQLインジェクション',\r\n    url: './img/paper.png'\r\n  }\r\n]\r\n\r\nfunction Janre(props){\r\n  \r\n}\r\n\r\nconst alreadyRemoved = []\r\nlet charactersState = db // This fixes issues with updating characters state forcing it to use the current state and not the state that was active when the card was created.\r\n\r\nfunction Advanced () {\r\n  const [characters, setCharacters] = useState(db)\r\n  const [lastDirection, setLastDirection] = useState()\r\n\r\n  const childRefs = useMemo(() => Array(db.length).fill(0).map(i => React.createRef()), [])\r\n\r\n  const swiped = (direction, nameToDelete) => {\r\n    console.log('removing: ' + nameToDelete)\r\n    setLastDirection(direction)\r\n    alreadyRemoved.push(nameToDelete)\r\n  }\r\n\r\n  const outOfFrame = (name) => {\r\n    console.log(name + ' left the screen!')\r\n    charactersState = charactersState.filter(character => character.no !== name)\r\n    setCharacters(charactersState)\r\n  }\r\n\r\n  const swipe = (dir) => {\r\n    const cardsLeft = characters.filter(person => !alreadyRemoved.includes(person.no))\r\n    if (cardsLeft.length) {\r\n      const toBeRemoved = cardsLeft[cardsLeft.length - 1].no // Find the card object to be removed\r\n      const index = db.map(person => person.no).indexOf(toBeRemoved) // Find the index of which to make the reference to\r\n      alreadyRemoved.push(toBeRemoved) // Make sure the next card gets removed next time if this card do not have time to exit the screen\r\n      childRefs[index].current.swipe(dir) // Swipe the card!\r\n    }\r\n  }\r\n\r\n  const timer = () =>{\r\n    var time = Date.now() +5000;\r\n    return time;\r\n  }\r\n\r\n  return (\r\n    <div className='app'>\r\n    <div>\r\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\r\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\r\n      <h1>SC</h1>\r\n      <div className='cardContainer'>\r\n        {characters.map((character, index) =>\r\n          <TinderCard ref={childRefs[index]} className='swipe' key={character.no} onSwipe={(dir) => swiped(dir, character.name)} onCardLeftScreen={() => outOfFrame(character.name)}>\r\n            <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\r\n              <h3>{character.no}</h3>\r\n              <h3 className='ex'>{character.ex}</h3>\r\n              <h3 className='ans'>{character.ans}</h3>\r\n              \r\n            </div>\r\n          </TinderCard>\r\n        )}\r\n      </div>\r\n      <div>\r\n        <h2><Countdown date={Date.now() + 5000} /></h2>\r\n      </div>\r\n      <div className='buttons'>\r\n        <button onClick={() => swipe('left')}>⇦ まだ</button>\r\n        <button onClick={() => swipe('right')}>覚えた ⇨</button>\r\n      </div>\r\n      {/* {lastDirection ? <h2 key={lastDirection} className='infoText'>{lastDirection}</h2> : <h2 className='infoText'></h2>} */}\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Advanced","import React from \"react\";\r\n\r\nconst Login = () => {\r\n    return(\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\n//screens\r\nimport Home from './Home';\r\nimport Card from './Advanced';\r\nimport Login from './Login';\r\n\r\nclass Default extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <header>Tangor</header>\r\n                <main>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={Home} />\r\n                        <Route path=\"/card\" component={Card} />\r\n                        <Route path=\"/login\" component={Login} />\r\n                        <Route render={() => <p>not found!.</p>} />\r\n                    </Switch>\r\n                </main>\r\n                {/* <div className=\"sankou\">\r\n                <footer className=\"link\">もっと詳しく知りたい\r\n                    <br /><a href=\"https://e-words.jp/\">IT用語辞典</a>\r\n                    <br /><a href=\"https://kotobank.jp/\">コトバンク</a>\r\n                </footer>\r\n                </div> */}\r\n                <footer className=\"copylight\">© 2021 Y.Kosuke</footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Default;","import React, { useState } from 'react'\nimport './App.css'\nimport { BrowserRouter, Route, Switch} from \"react-router-dom\";\n\n//template\nimport Default from './example/Default';\nimport Login from './example/Login';\n// import { render } from '@testing-library/react';\n\nclass App extends React.Component {\n  render(){\n  return (\n    <BrowserRouter>\n      <switch>\n        <Route path=\"/\" component={Default} />\n        <Route exact path=\"/login\" component={Login} />\n\n      </switch>\n    </BrowserRouter>\n  );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\nserviceWorker.register();"],"sourceRoot":""}